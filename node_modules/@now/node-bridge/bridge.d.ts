/// <reference types="node" />
import { APIGatewayProxyEvent, Context } from 'aws-lambda';
import { Server, IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
interface NowProxyEvent {
    Action: string;
    body: string;
}
export interface NowProxyRequest {
    isApiGateway?: boolean;
    method: string;
    path: string;
    headers: IncomingHttpHeaders;
    body: Buffer;
}
export interface NowProxyResponse {
    statusCode: number;
    headers: OutgoingHttpHeaders;
    body: string;
    encoding: string;
}
interface ServerLike {
    listen: (opts: {
        host?: string;
        port?: number;
    }, callback: (this: Server | null) => void) => Server | void;
}
export declare class Bridge {
    private server;
    private listening;
    private resolveListening;
    private events;
    private reqIdSeed;
    private shouldStoreEvents;
    constructor(server?: ServerLike, shouldStoreEvents?: boolean);
    setServer(server: ServerLike): void;
    listen(): void | Server;
    launcher(event: NowProxyEvent | APIGatewayProxyEvent, context: Context): Promise<NowProxyResponse>;
    consumeEvent(reqId: string): NowProxyRequest;
}
export {};
